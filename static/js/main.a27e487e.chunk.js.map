{"version":3,"sources":["logo.png","components/header/Header.jsx","components/footer/Footer.jsx","utils/useData.js","utils/formatDate.js","utils/createActive.js","components/spinner/Spinner.jsx","pages/home/HomePage.jsx","utils/createStats.js","components/country/Country.jsx","pages/countries/CountriesPage.jsx","pages/info/InfoPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","useState","toggle","setToggle","handleClick","className","onClick","to","href","target","rel","color","size","src","logo","alt","Footer","useData","url","state","setState","loading","setLoading","error","setError","useEffect","a","axios","res","data","fetchData","formatDate","lastUpdate","split","createActive","confirmed","value","deaths","recovered","Spinner","HomePage","formatter","active","createRate","stat","percentage","Number","isInteger","toFixed","Country","country","stats","activeStat","deathsPercentage","recoveredPercentage","activePercentage","CountriesPage","search","setSearch","filterCountries","sort","b","filter","el","countryRegion","toLowerCase","includes","type","onChange","e","map","index","key","combinedKey","InfoPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","history","History","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a27e487e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7225a689.png\";","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaLinkedin, FaGithub } from 'react-icons/fa';\r\n\r\nimport logo from '../../logo.png';\r\n\r\nimport './header.scss';\r\n\r\nconst Header = () => {\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const handleClick = () => setToggle(!toggle);\r\n\r\n  return (\r\n    <nav className='header-container'>\r\n      <div className='burger-container' onClick={handleClick}>\r\n        <span className={!toggle ? 'burger' : 'burger toggled'} />\r\n      </div>\r\n      <span className={toggle ? 'menu-overlay' : ''} onClick={handleClick} />\r\n\r\n      <ul className={!toggle ? 'nav-links' : 'nav-links toggled'}>\r\n        <li className={toggle ? 'link' : 'LinksOut'}>\r\n          <Link to='/' onClick={handleClick}>\r\n            HOME\r\n          </Link>\r\n        </li>\r\n        <li className={toggle ? 'link' : 'LinksOut'}>\r\n          <Link to='/countries' onClick={handleClick}>\r\n            COUNTRIES\r\n          </Link>\r\n        </li>\r\n        <li className={toggle ? 'link' : 'LinksOut'}>\r\n          <Link to='/info' onClick={handleClick}>\r\n            INFO\r\n          </Link>\r\n        </li>\r\n\r\n        <li className='platformLinks'>\r\n          <a\r\n            href='https://www.linkedin.com/in/ricardogesteves/'\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n          >\r\n            <FaLinkedin color={toggle ? '#304357' : '#0a0e14'} size='2rem' />\r\n          </a>\r\n          <a\r\n            href='https://github.com/RicardoGEsteves/'\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n          >\r\n            <FaGithub color={toggle ? '#304357' : '#0a0e14'} size='2rem' />\r\n          </a>\r\n        </li>\r\n      </ul>\r\n\r\n      <ul className='desktop-nav-links'>\r\n        <div className='logo-container'>\r\n          <Link to='/' onClick={handleClick}>\r\n            <img src={logo} alt='logo' />\r\n          </Link>\r\n        </div>\r\n\r\n        <div className='links-container'>\r\n          <li className='nav-link'>\r\n            <Link to='/countries' onClick={handleClick}>\r\n              COUNTRIES\r\n            </Link>\r\n          </li>\r\n          <li className='nav-link'>\r\n            <Link to='/info' onClick={handleClick}>\r\n              INFO\r\n            </Link>\r\n          </li>\r\n        </div>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { FaLinkedin, FaGithub } from 'react-icons/fa';\r\n\r\nimport './footer.scss';\r\nconst Footer = () => {\r\n  return (\r\n    <div className='footer-container'>\r\n      <div className='copy'>\r\n        <p>&copy; 2020 Ricardo Esteves</p>\r\n      </div>\r\n      <div className='links'>\r\n        <a\r\n          href='https://www.linkedin.com/in/ricardogesteves/'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          <FaLinkedin color='#304357' size='2rem' />\r\n        </a>\r\n        <a\r\n          href='https://github.com/RicardoGEsteves/'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          <FaGithub color='#304357' size='2rem' />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useData = url => {\r\n  const [state, setState] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setError(false);\r\n      setLoading(true);\r\n\r\n      try {\r\n        const res = await axios(url);\r\n\r\n        setState(res.data);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n  return {\r\n    state,\r\n    loading,\r\n    error\r\n  };\r\n};\r\n\r\nexport default useData;\r\n","const formatDate = (loading, state) => {\r\n  if (!loading) {\r\n    const formatter = state.lastUpdate.split('T');\r\n    return formatter;\r\n  }\r\n};\r\n\r\nexport default formatDate;\r\n","const createActive = (loading, state) => {\r\n  if (!loading) {\r\n    const active =\r\n      state.confirmed.value - (state.deaths.value + state.recovered.value);\r\n    return active;\r\n  }\r\n};\r\n\r\nexport default createActive;\r\n","import React from 'react';\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className='spinner-overlay'>\r\n      <span className='spinner' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\nimport useData from '../../utils/useData';\r\nimport formatDate from '../../utils/formatDate';\r\nimport createActive from '../../utils/createActive';\r\n\r\nimport Spinner from '../../components/spinner/Spinner';\r\n\r\nimport './homePage.scss';\r\n\r\nconst HomePage = () => {\r\n  const { state, loading, error } = useData('https://covid19.mathdro.id/api');\r\n\r\n  const formatter = formatDate(loading, state);\r\n\r\n  const active = createActive(loading, state);\r\n\r\n  return (\r\n    <div className='home-page-container'>\r\n      {error && <p>Something went wrong, try again later</p>}\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          <h1>Covid-19 World state</h1>\r\n\r\n          <div className='statsWrapper'>\r\n            <div className='confirmedWrapper'>\r\n              <h3>Confirmed</h3>\r\n              <span>{state.confirmed.value}</span>\r\n            </div>\r\n\r\n            <div className='deathsWrapper'>\r\n              <h3>Deaths</h3>\r\n              <span>\r\n                {' '}\r\n                <span>{state.deaths.value}</span>{' '}\r\n              </span>\r\n            </div>\r\n\r\n            <div className='recoveredWrapper'>\r\n              <h3>Recovered</h3>\r\n              <span>{state.recovered.value}</span>\r\n            </div>\r\n\r\n            <div className='activeWrapper'>\r\n              <h3>Active</h3>\r\n              <span>{active}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='dateWrapper'>\r\n            <h5>Last Update</h5>\r\n            <span>Date: {formatter[0]} </span>\r\n            <span>Time: {formatter[1]} </span>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","export const activeStat = stats =>\r\n  stats.confirmed - (stats.deaths + stats.recovered);\r\n\r\nexport const createRate = (confirmed, stat) => {\r\n  const percentage = (stat / confirmed) * 100;\r\n\r\n  if (stat === 0 || Number.isInteger(percentage) === true) {\r\n    return percentage;\r\n  }\r\n\r\n  return percentage.toFixed(3);\r\n};\r\n","import React from 'react';\r\n\r\nimport { activeStat, createRate } from '../../utils/createStats';\r\n\r\nimport './country.scss';\r\n\r\nconst Country = ({ country, confirmed, deaths, recovered }) => {\r\n  const stats = { confirmed, deaths, recovered };\r\n\r\n  const active = activeStat(stats);\r\n  const deathsPercentage = createRate(confirmed, deaths);\r\n  const recoveredPercentage = createRate(confirmed, recovered);\r\n  const activePercentage = createRate(confirmed, active);\r\n\r\n  return (\r\n    <div className='country-container'>\r\n      <h3>{country}</h3>\r\n\r\n      <div className='stats-wrapper'>\r\n        <p className='confirmed'>Confirmed: {confirmed}</p>\r\n        <p className='deaths'>Deaths: {deaths}</p>\r\n        <p className='deaths last'>{deathsPercentage} %</p>\r\n        <p className='recovered'>Recovered: {recovered}</p>\r\n        <p className='recovered last'>{recoveredPercentage} %</p>\r\n        <p className='active'>Active: {active}</p>\r\n        <p className='active'>{activePercentage} %</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import React, { useState } from 'react';\r\n\r\nimport useData from '../../utils/useData';\r\n\r\nimport Spinner from '../../components/spinner/Spinner';\r\nimport Country from '../../components/country/Country';\r\n\r\nimport { GoSearch } from 'react-icons/go';\r\n\r\nimport './countriesPage.scss';\r\n\r\nconst CountriesPage = () => {\r\n  const { state, loading, error } = useData(\r\n    'https://covid19.mathdro.id/api/confirmed'\r\n  );\r\n\r\n  const [search, setSearch] = useState('');\r\n\r\n  const filterCountries =\r\n    !loading &&\r\n    state\r\n      .sort((a, b) => b.confirmed - a.confirmed)\r\n      .filter(el =>\r\n        el.countryRegion.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n\r\n  return (\r\n    <div className='countries-page-container'>\r\n      {error && <p>Something went wrong, try again later</p>}\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <div className='countries-page-wrapper'>\r\n          <div className='title-wrapper'>\r\n            <h2 className='title'>All stats by country</h2>\r\n            <p className='sub-title'>countries sorted by confirmed cases</p>\r\n          </div>\r\n\r\n          <div className='search-container'>\r\n            <GoSearch color='#f2f4f7' size='1.8rem' />\r\n            <input\r\n              type='text'\r\n              value={search}\r\n              onChange={e => setSearch(e.target.value)}\r\n            />\r\n          </div>\r\n          <ul className='countries-container'>\r\n            {!loading &&\r\n              filterCountries.map((el, index) => (\r\n                <li key={index} className='country-wrapper'>\r\n                  <Country\r\n                    country={el.combinedKey}\r\n                    confirmed={el.confirmed}\r\n                    deaths={el.deaths}\r\n                    recovered={el.recovered}\r\n                  />\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesPage;\r\n","import React from 'react';\r\nimport { GoInfo } from 'react-icons/go';\r\n\r\nimport './info.scss';\r\nconst InfoPage = () => {\r\n  return (\r\n    <div className='info-container'>\r\n      <div className='info-message'>\r\n        <GoInfo color='#f2f4f7' size='6rem' />\r\n        <p>\r\n          This application received global data from Johns Hopkins Coronavirus\r\n          Resource Center (JHU CSSE) as-a-service.\r\n          <br />\r\n          The reason behind the creation of this web app is merely informative\r\n          and without any interest or profitable funds. with the unfolding of\r\n          this terrible situation, I think it's up to us to do everything\r\n          possible to avoid the worst, and contribute in the way that we can,\r\n          and this is one of my forms of contribution.\r\n          <br />\r\n          The information nowadays it is everything, the more there is as long\r\n          as it is reliable the better.\r\n        </p>\r\n      </div>\r\n      <div className='other-info'>\r\n        <p className='info'>More information about coronavirus</p>\r\n        <p className='location'>Worldwide:</p>\r\n        <a\r\n          href='https://www.who.int/emergencies/diseases/novel-coronavirus-2019'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          OMS Novel Coronavirus 2019\r\n        </a>\r\n        <p className='location'>Portugal:</p>\r\n        <a\r\n          href='https://covid19.min-saude.pt/'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          DGS SNS Novel Coronavirus 2019\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoPage;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Header from './components/header/Header';\nimport Footer from './components/footer/Footer';\n\nimport HomePage from './pages/home/HomePage';\nimport CountriesPage from './pages/countries/CountriesPage';\nimport InfoPage from './pages/info/InfoPage';\n\nimport './app.scss';\n\nconst App = () => {\n  return (\n    <div className='app-container'>\n      <div className='header'>\n        {' '}\n        <Header />\n      </div>\n      <div className='content'>\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/countries' component={CountriesPage} />\n          <Route path='/info' component={InfoPage} />\n        </Switch>\n      </div>\n      <div className='footer'>\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './index.scss';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router history={History} basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}